{"remainingRequest":"F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\src\\views\\spectrum\\my.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\src\\views\\spectrum\\my.vue","mtime":1582817482870},{"path":"F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\前后端分离\\projects\\前后端分离--吉他屋\\vue-musichome\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLm15ew0KICBtYXJnaW4tdG9wOiAwcHgNCn0NCg=="},{"version":3,"sources":["my.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgRA;AACA;AACA","file":"my.vue","sourceRoot":"src/views/spectrum","sourcesContent":["<template>\r\n  <div class=\"my\">\r\n    <!-- 上方区域 -------------------------------------------------------------------------->\r\n    <el-form\r\n      ref=\"searchForm\"\r\n      :inline=\"true\"\r\n      :model=\"searchMap\"\r\n      style=\"margin-top: 20px;margin-left:70px\"\r\n    >\r\n      <el-form-item prop=\"name\">\r\n        <el-input v-model=\"searchMap.name\" placeholder=\"曲谱名称\" style=\"width: 200px;\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item prop=\"author\">\r\n        <el-input v-model=\"searchMap.author\" placeholder=\"作者名称\" style=\"width:200px;\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"success\" icon=\"el-icon-search\" circle @click=\"findMys\"></el-button>\r\n        <el-button type=\"info\" round @click=\"resetForm('searchForm')\">重置</el-button>\r\n        <el-button type=\"warning\" round icon=\"el-icon-circle-plus-outline\" @click=\"handleAdd\">新增</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n    <!-- ------------------------------------------------------------------------ -->\r\n    <!-- 列表-->\r\n    <!-- :data 绑定渲染的数据；border: 边框; -->\r\n    <el-table :data=\"list\" stripe border style=\"width: 100%\">\r\n      <!--type=\"index\" 获取索引值，从1开始； label 显示的标题; prop 数据字段名； width 列的宽度 -->\r\n      <el-table-column type=\"index\" label=\"序号\" width=\"100\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"曲谱名称\"></el-table-column>\r\n      <el-table-column prop=\"author\" label=\"作者\"></el-table-column>\r\n\r\n      <el-table-column label=\"操作\" width=\"300\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"primary\" round icon=\"el-icon-zoom-in\" @click=\"dialogVisible = true\">谱</el-button>\r\n          <el-button type=\"success\" icon=\"el-icon-edit\" circle @click=\"handleEdit(scope.row.id)\"></el-button>\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" circle @click=\"deleMyById(scope.row.id)\"></el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <!-- 下方页码区域-------------------------------------------------------------------- -->\r\n    <!-- 分页，添加在div里面 -->\r\n    <el-pagination\r\n      @size-change=\"handleSizeChange\"\r\n      @current-change=\"handleCurrentChange\"\r\n      :current-page=\"currentPage\"\r\n      :page-sizes=\"[5, 8, 10]\"\r\n      :page-size=\"pageSize\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      :total=\"total\"\r\n    ></el-pagination>\r\n    <!-- ------------点击弹出的页面 ------------------------------------------------------>\r\n    <el-dialog title=\"新增\" :visible.sync=\"dialogFormVisible\" width=\"400px\">\r\n      <el-form class=\"addform\" ref=\"form\" :model=\"form\" label-width=\"100px\">\r\n        <el-form-item label=\"曲谱名\" prop=\"name\">\r\n          <el-input v-model=\"form.name\" style=\"width:230px\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"作者名\" prop=\"author\">\r\n          <el-input v-model=\"form.author\" style=\"width:230px\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"曲谱大类型\" prop=\"btype\">\r\n          <el-input disabled style=\"width:230px\" placeholder=\"弹唱谱\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"曲谱小类型\" prop=\"stype\">\r\n          <el-input disabled style=\"width:230px\" placeholder=\"民谣\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"form.id === null ? addData(): updateData()\">保存</el-button>\r\n          <el-button @click=\"dialogFormVisible = false\">取消</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-dialog>\r\n\r\n    <!-- ------------------------------曲谱------------------------------- -->\r\n      <el-dialog :visible.sync=\"dialogVisible\" width=\"85%\">\r\n        <el-image v-for=\"url in urls\" :key=\"url\" :src=\"url\" lazy></el-image>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        </span>\r\n      </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport myApi from \"@/api/my\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      list: [], //列表数据\r\n      //----------------------------------------------分页\r\n      total: 0, // 总记录数\r\n      currentPage: 1, // 当前页, 默认第1页\r\n      pageSize: 10, // 每页显示条数， 10条\r\n      //---------------------------------------------搜索框\r\n      searchMap: {\r\n        name: \"\",\r\n        author: \"\"\r\n      },\r\n      //--------------------------------------------------控制对话框是否\r\n      dialogFormVisible: false, // 控制新增对话框\r\n      dialogVisible: false,\r\n      //--------------------------------------------------新增对话框的数据绑定源\r\n      form: {\r\n        id: \"\",\r\n        name: \"\",\r\n        author: \"\",\r\n        btype: 1,\r\n        stype: 1\r\n      },\r\n      //曲谱抽屉\r\n      drawer: false,\r\n      urls: [\r\n        \"https://fuss10.elemecdn.com/a/3f/3302e58f9a181d2509f3dc0fa68b0jpeg.jpeg\",\r\n        \"https://fuss10.elemecdn.com/1/34/19aa98b1fcb2781c4fba33d850549jpeg.jpeg\",\r\n        \"https://fuss10.elemecdn.com/0/6f/e35ff375812e6b0020b6b4e8f9583jpeg.jpeg\",\r\n        \"https://fuss10.elemecdn.com/9/bb/e27858e973f5d7d3904835f46abbdjpeg.jpeg\",\r\n        \"https://fuss10.elemecdn.com/d/e6/c4d93a3805b3ce3f323f7974e6f78jpeg.jpeg\",\r\n        \"https://fuss10.elemecdn.com/3/28/bbf893f792f03a54408b3b7a7ebf0jpeg.jpeg\",\r\n        \"https://fuss10.elemecdn.com/2/11/6535bcfb26e4c79b48ddde44f4b6fjpeg.jpeg\"\r\n      ]\r\n    };\r\n  },\r\n\r\n  // 钩子函数获取数据\r\n  created() {\r\n    this.getData();\r\n  },\r\n  methods: {\r\n    //列表获取\r\n    getData() {\r\n      myApi.search(this.currentPage, this.pageSize).then(response => {\r\n        // const resp = response.data;\r\n        const resp = response.data;\r\n        this.total = resp.totalElements;\r\n        // this.total =resp.total;\r\n        this.list = resp.content;\r\n        // console.log(this.list);\r\n        console.log(response);\r\n      });\r\n    },\r\n\r\n    //  上方查\r\n    findMys() {\r\n      console.log(\"xxxxxxxx\", this.searchMap);\r\n      myApi.findMys(this.searchMap).then(response => {\r\n        const resp = response.data;\r\n        this.list = resp;\r\n        // // this.name =resp.name;\r\n        // // this.author = resp.author;\r\n        // this.searchMap = resp.content;\r\n        console.log(response);\r\n      });\r\n    },\r\n\r\n    //分页改变\r\n    handleSizeChange(val) {\r\n      this.pageSize = val;\r\n      this.getData();\r\n    },\r\n    //分页改变\r\n    handleCurrentChange(val) {\r\n      this.currentPage = val;\r\n      this.getData();\r\n    },\r\n    // 表单重置，\r\n    // 在 el-form-item 标签属性 prop 上, 指定了字段名, 重置才会生效\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields();\r\n      this.getData();\r\n    },\r\n    // 打开新增窗口\r\n    handleAdd() {\r\n      this.dialogFormVisible = true;\r\n      this.$nextTick(() => {\r\n        // this.$nextTick()它是一个异步事件，当渲染结束 之后 ，它的回调函数才会被执行\r\n        // 弹出窗口打开之后 ，需要加载Dom, 就需要花费一点时间，我们就应该等待它加载完dom之后，再进行调用resetFields方法，重置表单和清除样式\r\n        this.$refs[\"form\"].resetFields();\r\n      });\r\n    },\r\n    //新增\r\n    addData() {\r\n      // 验证通过，提交添加\r\n      myApi.add(this.form).then(response => {\r\n        // const resp = response.data\r\n        const resp = response;\r\n        console.log(resp);\r\n        // 提示信息\r\n        this.$message({\r\n          message: \"新增成功\",\r\n          type: \"success\"\r\n        });\r\n        if (resp) {\r\n          this.getData();\r\n          this.dialogFormVisible = false;\r\n          console.log(\"--------------新增数据成功------------\");\r\n        } else {\r\n          // 验证不通过\r\n          this.$message({\r\n            message: resp.msg,\r\n            type: \"warning\"\r\n          });\r\n        }\r\n      });\r\n    },\r\n    //删除\r\n    deleMyById(id) {\r\n      console.log(\"删除\", id);\r\n      this.$confirm(\"确认删除这条记录吗？\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          // 确认\r\n          console.log(\"确认\");\r\n          myApi.deleteMyById(id).then(response => {\r\n            const resp = response.data;\r\n            //提示信息\r\n            this.$message({\r\n              message: \"删除成功\",\r\n              type: \"success\"\r\n            });\r\n\r\n            // 删除成功，刷新列表\r\n            this.getData();\r\n          });\r\n        })\r\n        .catch(() => {\r\n          // 取消删除，不理会\r\n          console.log(\"取消\");\r\n        });\r\n    },\r\n    //--------------------------------------------------------------编辑功能（打开窗口+保存）\r\n    // 打开编辑窗口\r\n    handleEdit(id) {\r\n      // 重用打开新增窗口方法, 不要少了 this\r\n      this.handleAdd();\r\n      // 查询数据\r\n      myApi.getMyById(id).then(response => {\r\n        console.log(response);\r\n        const resp = response.data;\r\n        this.form = resp;\r\n      });\r\n    },\r\n    // 更新数据\r\n    updateData(formName) {\r\n      // 验证通过，提交\r\n      myApi.update(this.form).then(response => {\r\n        //提示信息\r\n        this.$message({\r\n          type: \"success\",\r\n          message: \"更新成功\"\r\n        });\r\n        this.getData(); // 刷新列表数据\r\n        this.dialogFormVisible = false; // 关闭窗口\r\n        // if (resp.flag) {\r\n        //   this.fetchData(); // 刷新列表数据\r\n        //   this.dialogFormVisible = false; // 关闭窗口\r\n        // } else {\r\n        //   // 失败, 弹出提示\r\n        //   this.$message({\r\n        //     message: resp.message,\r\n        //     type: \"warning\"\r\n        //   });\r\n        // }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style >\r\n.my{\r\n  margin-top: 0px\r\n}\r\n</style>\r\n  \r\n"]}]}